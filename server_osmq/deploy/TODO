- sudo timedatectl set-timezone Africa/Algiers
- Change the limit of nginx maximum upload to equal the MAX_CONTENT_LENGTH param in  config.py
    To do this you have to add the following line in the /etc/nginx/nginx.conf file
        client_max_body_size 5M;    # CHANGE IT ACCORDING TO MAX_CONTENT_LENGTH

- Create the database for rna app and
    create user adminrna with encrypted password 'admin';
    create database rna;
    grant all privileges on database rna to adminrna;
- Install in the newly created database the postgis extention (CREATE EXTENTION)
- Install in the newly created database the pg_trgm extention (CREATE EXTENTION)
- Install in the newly created database the uuid-ossp extention (CREATE EXTENTION)
- Put the (new) postgresql database connection string in the instance/config.py file (SQLALCHEMY_DATABASE_URI parameter)

- Adding this lines to instance config :
    - UPLOADS_DEFAULT_DEST="/home/adminrna/uploads"
    - UPLOADS_DEFAULT_URL="/uploads"
    - LOG_PATH = "/var/log/rna/"
- Creating directorys :
    - sudo mkdir /var/www/static with chmod 777
    - sudo mkdir /home/adminrna/upload with chmod 777
    - sudo mkdir /var/log/rna/ with chmod 777

- cd /home/adminrna/rna/server_rna
- python3.6 -m venv .venv
- source .venv/bin/activate
- pip install -r requirements.txt

###########################----------------------------REPLICATION DB MAN----------------------------###############################
###########################------------streaming replication asynchronous Hot standby----------------###############################
- Master: IP@ 192.168.0.235 / Replication: IP@ 192.168.0.226
- Load postgresql file config for both master and replication server to /etc/postgres/13/main/
- Create user on DB master: CREATE USER replication REPLICATION LOGIN CONNECTION LIMIT 100 ENCRYPTED PASSWORD 'replication';
- Backup repesitory: /var/lib/postgresql/13/main/ to /var/lib/postgresql/13/main_old/
- remove : sudo rm -r /var/lib/postgresql/13/main/
- Stop the replication postgres server: systemctl stop postgresql
- Use the pg_basebackup (use the user postgres "sudo su postgres") tool to take the base backup with the right ownership (the database system user i.e Postgres, within the Postgres user account) and with the right permissions, 
  with command line: pg_basebackup -h 192.168.0.235 -D /var/lib/postgresql/13/main -U replication -P -v  -R -X stream -C -S pgstandby1
- When the backup process is done, a standby.signal is created and the connection settings are appended to postgresql.auto.conf, with cli : ls /var/lib/postgresql/13/main/postgresql.auto.conf
- Now start the replication postgres server: systemctl start postgresql
- Execute : sudo localedef -f UTF-8 -i fr_FR fr_FR.UTF-8 After that you have to reboot computer
###########################--------------------------------------------------------------------------###############################


###########################----------------------------REPLICATION FILE MAN----------------------------###############################
###########################------------Syncing Files Across ALL your Computers via Syncthing-----------###############################
- Master-Server / Replication-Server : - cli: bash install.bash
	  - Go to /etc/supervisor/conf.d/ and copy the file named syncthing.conf within deploy\Sync conf folder.
	  - sudo systemctl enable supervisor.service
 	  - uploads file path for sync is : /home/adminrna/uploads with sudo chmod 777
###########################--------------------------------------------------------------------------###############################


###########################---------------------------GEOSERVER DEPLOY MAN----------------------------###############################
###########################-----------------Installing and configuring the geoserver------------------###############################
- Master-Server / Replication-Server : - cli: bash install.bash
	  - sudo apt install openjdk-8-jdk
	  - wget https://vorboss.dl.sourceforge.net/project/geoserver/GeoServer/2.18.2/geoserver-2.18.2-bin.zip
	  - sudo unzip ./ggeoserver-2.18.2-bin.zip -d /usr/share/geoserver
	  - Copy the files with in folder geoserver-config to ther path respectively :
	        - geoserver.service to : /etc/systemd/system/
	        - geoserver to : /etc/default/
	  - sudo systemctl daemon-reload
	  - sudo systemctl enable geoserver.service
###########################--------------------------------------------------------------------------###############################




###########################---------------------------HIGH AVAILIBILITY PATRONI----------------------------###############################
###########################--------------Set up a high availability procedure for postgresql cluster-------###############################

this solution is provide by Zalendo
https://patroni.readthedocs.io/


Base on python


Management of postgresql


Automatic failover Management with API


Storage with ETCD server (Storage  Key/value)



                   +----------------+
 +--------+    +---+ PG-Node1 Master|
 |  ETCD  +----+   +----------------+
 +--------+2379|
               |   +---------------+
 +--------+    +---+ PG-Node2 SALVE|
 | HAPROXY+----+   +---------------+
 +--------+    |
5000     8008  |   +---------+
               +---+   PGx   |
                   +---------+


ETCD

* ideal in cluster and isolated

In this solution the servers: haproxy + etcd = are in the same machine


`` ``
sudo apt install -y etcd haproxy

Copy the contents of the etcd file to the following path: / etc / default / etcd

sudo systemctl restart etcd

Check Port listning netstat -nta

-------------------------------------------------------------------

# POSTGRESQL - PATRONI 



* Setting up of patroni on the NODE or CLUSTER 1 "MASTER"
sudo apt install -y python-etcd postgresql-13 && install patroni

sudo systemctl stop postgresql
sudo ln -s / usr / lib / postgresql / 13 / bin / pg_ctl / usr / bin /

sudo mkdir / data / patroni -p
sudo chown postgres: postgres / data / patroni
sudo chmod 700 / data / patroni
Copy the contents of the node 1 file to the following path /etc/patroni.yml

* Setting up of patroni on the NODE or CLUSTER 2 "SLAVE"
sudo apt install -y python-etcd postgresql-13 && install patroni

sudo systemctl stop postgresql
sudo ln -s / usr / lib / postgresql / 13 / bin / pg_ctl / usr / bin /

sudo mkdir / data / patroni -p
sudo chown postgres: postgres / data / patroni
sudo chmod 700 / data / patroni
Copy the contents of the node 1 file to the following path /etc/patroni.yml

------------------------------------------------------------------

# Daemon Boot service

Copy the contents of the patroni.service configuration file to the following path /etc/systemd/system/patroni.service

sudo systemctl daemon-reload && systemctl restart patroni && systemctl enable patroni && systemctl disable postgresql
-----------------------------------------------------------------

# HAPROXY

Copy the contents of the patroni.service configuration file to the following path /etc/haproxy/haproxy.cfg

sudo service haproxy restart

----------------------------------------------------------------

# TEST


psql -h 192.168.0.225 -p 5000 -U postgres
CREATE DATABASE test;
systemctl stop patroni
patronictl -c /etc/patroni.yml list
etcdctl ls / --recursive
etcdctl get /db/postgres/members/node1
